// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Local
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// Prod
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Specialty {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  Doctor      Doctor[]
  Appointment Appointment[]
}

model Doctor {
  id          String        @id
  fullName    String
  email       String?
  phone       String?
  specialty   Specialty     @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  specialtyId String
  Appointment Appointment[]
}

model Patient {
  id             String        @id
  fullName       String
  email          String?
  phone          String?
  medicalHistory String?
  accountNumber  String?
  Appointment    Appointment[]
}

model Appointment {
  id            String   @id @default(uuid())
  scheduledDate DateTime
  scheduledTime String
  cupo          Int
  shift         String
  officeNumber  String?
  insurance     String?
  paymentCode   String?

  service     Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  specialtyId String

  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId String

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(uuid())
  name      String
  username  String   @unique
  password  String
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
}
